package boundedResponse
public
  with CASE_Properties;

  with AGREE_PLTL;
  renames AGREE_PLTL::all;
  
  ------------------------------
  -- Bounded Response Monitor --
  ------------------------------
  thread boundedResponse
    features
      response: in event port;
      request: in event port;
      alert: out event port;
    properties
      CASE_Properties::Monitoring => 100;
      CASE_Properties::Monitor_Latched => true;
    annex agree {**
      eq rsp : bool = event(response);
      eq req : bool = event(request);

       eq notReqSinceRsp : bool = rsp or 
                                 ((not req) and (false -> pre(notReqSinceRsp)));                
      assume "One automation request in flight at a time" :
        true -> (req => pre(Historically(not req) or notReqSinceRsp));
      
      ------------------------------
      -- Component Implementation --
      ------------------------------
      const is_latched : bool = true;
      const MAX_LATENCY : int = 1;
      
      eq isPending : bool = (req and not rsp) or 
                            ((not rsp) and (false -> pre(isPending)));                            
      eq latency : int = 0 -> (if req then 0 else pre(latency) + 1);
     
      eq policy : bool = (rsp => req) ->
                         (    (isPending => latency < MAX_LATENCY)   
                          and (rsp => (req or pre(isPending))));
      eq alrt : bool = (not policy) -> 
                       ((is_latched and pre(alrt)) or not policy);
                              
      guarantee "Alert port tracks alrt variable" :
        event(alert) = alrt;
    **};
  end boundedResponse;

  thread implementation boundedResponse.Impl
    properties            
      Dispatch_Protocol => Periodic;
      Period => 500ms;
      Compute_Execution_Time => 2ms .. 2ms;
      Stack_Size => 65536 bytes;
      Source_text => ("");
  end boundedResponse.Impl;
	
end boundedResponse;