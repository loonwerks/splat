use "BitFns.sml";
use "BitContig.sml";

open BitFns BitContig;

(*===========================================================================*)
(* Contiguity types for message buffer parsing                               *)
(*===========================================================================*)

fun varloc s = Loc (VarName s);

(* -------------------------------------------------------------------------- *)
(* Some basic contig types.                                                   *)
(* -------------------------------------------------------------------------- *)

val bool = Basic Bool;
val bit  = Basic(Unsigned 1);
val u4   = Basic(Unsigned 4);
val u8   = Basic(Unsigned 8);
val char = Basic(Unsigned 8);
val u12  = Basic(Unsigned 12);
val u16  = Basic(Unsigned 16);
val u24  = Basic(Unsigned 24);
val i12  = Basic(Signed 12);
val i24  = Basic(Signed 24);

(* -------------------------------------------------------------------------- *)
(* Widths for basic items,  in bits.                                          *)
(* -------------------------------------------------------------------------- *)

fun phase3_atom_width atm =
 case atm
  of Bool       => 1
   | Signed i   => i
   | Unsigned i => i
   | other      => raise ERR "atom_width" "unknown width of Raw"


(*---------------------------------------------------------------------------*)
(* Valuation functions                                                       *)
(*---------------------------------------------------------------------------*)

fun dvalFn atm bits = raise ERR "dvalFn" "undefined";

fun valFn atm bits =
 case atm
  of Signed i => SOME (BitFns.twos_comp bits)
   | otherwise => SOME (BitFns.unsigned bits);

val theEnv = ([],[],phase3_atom_width,valFn,dvalFn)

(*---------------------------------------------------------------------------*)
(* Takes a contig and a decoder and combines them into a parser.             *)
(*---------------------------------------------------------------------------*)

fun genParse env p A =
 case p
  of (contig,mk_data)
 =>
 case parseFn env A (VarName"root") contig
                 ([],0,empty_lvalMap)
  of SOME ([ptree],_,_) => total mk_data ptree
   | otherwise => NONE;

fun adsbParse p A = genParse theEnv p A;


(*---------------------------------------------------------------------------*)
(* Combination of tt_bits gives track status.                                *)
(*---------------------------------------------------------------------------*)

val miscIndicators = Recd [
  ("tt_bit0",    bool),
  ("tt_bit1",    bool),
  ("reportKind", bool),
  ("airborne",   bool)
 ];

(*---------------------------------------------------------------------------*)
(* 28 bytes in length. Interpretations of fields given below in field        *)
(* constructors.                                                             *)
(*                                                                           *)
(*   messageId - 8 bits, unsigned, expected to be 20                         *)
(*   status    - 4 bits, unsigned, [0..1] used                               *)
(*   addrType  - 4 bits, unsigned, [0..5] used                               *)
(*   address   - 3 bytes,                                                    *)
(*   lat       - 24 bits, signed real                                        *)
(*   lon       - 24 bits, signed real                                        *)
(*   alt       - 12 bits, unsigned.                                          *)
(*   miscInd   - miscIndicators                                              *)
(*   nic       - 4 bits, essentially an enum of 12 elts (0-11)               *)
(*   nacp      - 4 bits, essentially an enum of 12 elts (0-11)               *)
(*   horizV    - 12 bits, unsigned, range [0..4093]. >= 4094 => 0xFFE        *)
(*   vertV     - 12 bits, signed, some special cases                         *)
(*   heading   - 8 bits, angular weighted value                              *)
(*   emitter   - 8 bits, unsigned, range [0..39],                            *)
(*   callSign  - 64 bits: 8 chars drawn from [A-Z," ",0-9]                   *)
(*   prio      - 4 bits, unsigned, [0-6] used                                *)
(*   spare     - 4 bits, unused.                                             *)
(*---------------------------------------------------------------------------*)

val traffic_report = Recd [
  ("messageID", u8),
  ("status",    u4),
  ("addrType",  u4),
  ("address",   u24),
  ("lat",       i24),
  ("lon",       i24),
  ("alt",       u12),
  ("miscInd",   miscIndicators),
  ("nic",       u4),
  ("nacp",      u4),
  ("horizV",    u12),
  ("vertV",     i12),
  ("heading",   u8),
  ("emitter",   u8),
  ("callSign",  Array (char,intLit 8)),
  ("prio",      u4),
  ("spare",     u4)
];

(*---------------------------------------------------------------------------*)
(* Example                                                                   *)
(*---------------------------------------------------------------------------*)
(*
    1 - Message ID 0x14
    2 - st 0x00
    3 - aa 0xAB
    4 - aa 0x45
    5 - aa 0x49
    6 - ll 0x1F
    7 - ll 0xEF
    8 - ll 0x15
    9 - nn 0xA8
    10 - nn 0x89
    11 - nn 0x78
    12 - dd 0x0F
    13 - dm 0x09
    14 - ia 0xA9
    15 - hh 0x07
    16 - hv 0xB0
    17 - vv 0x01
    18 - tt 0x20
    19 - ee 0x01
    20 - cc 0x4E
    21 - cc 0x38
    22 - cc 0x32
    23 - cc 0x35
    24 - cc 0x56
    25 - cc 0x20
    26 - cc 0x20
    27 - cc 0x20
    28 - px 0x00
*)

val list =
 [0x14, 0x00, 0xAB, 0x45, 0x49, 0x1F, 0xEF, 0x15, 0xA8,
  0x89, 0x78, 0x0F, 0x09, 0xA9, 0x07, 0xB0, 0x01, 0x20,
  0x01, 0x4E, 0x38, 0x32, 0x35, 0x56, 0x20, 0x20, 0x20, 0x00];

val w8list = map Word8.fromInt list;
val A = Word8Array.fromList w8list;

val PASS (pos,theta) = debug theEnv traffic_report A;
fun spill theta = Redblackmap.listItems theta;

(*---------------------------------------------------------------------------*)
(* Traffic report data structure                                             *)
(*---------------------------------------------------------------------------*)

type miscIndicators =
  {tt_bit0    : bool,
   tt_bit1    : bool,
   reportKind : bool,
   airborne   : bool};

type traffic_report =
   {messageID : int,
    status    : int,
    addrType  : int,
    address   : int,
    lat       : real,
    lon       : real,
    alt       : int,
    miscInd   : miscIndicators,
    nic       : int,
    nacp      : int,
    horizV    : int,
    vertV     : int,
    heading   : int,
    emitter   : int,
    callSign  : string,
    prio      : int
  };

(*---------------------------------------------------------------------------*)
(* Construct traffic report fields                                           *)
(*---------------------------------------------------------------------------*)

fun leaf_bits (LEAF (a, blist)) = blist;
fun mk_int (LEAF (a, blist)) = Option.valOf (valFn a blist);

fun mk_string ptree =
 case ptree
  of ARRAY elts => String.implode (List.map (Char.chr o mk_int) elts)
   | otherwise  => raise ERR "mk_string" "";

fun mk_miscInd ptree =
 case ptree
  of RECD [("tt_bit0", tt0),("tt_bit1", tt1),
           ("reportKind", rpt),("airborne", abn)]
     =>
       {tt_bit0    = boolVal (mk_int tt0),
        tt_bit1    = boolVal (mk_int tt1),
        reportKind = boolVal (mk_int rpt),
        airborne   = boolVal (mk_int abn)}
   | otherwise => raise ERR "mk_miscInd" "";

fun mult_by_factor factor i = Real.*(factor, Real.fromInt i);

val twoE23 = IntInf.toInt(IntInf.pow(ii_2,23));

(*---------------------------------------------------------------------------*)
(* Make a traffic report record.                                             *)
(*---------------------------------------------------------------------------*)

fun mk_traffic_report ptree =
 case ptree
  of RECD [
      ("messageID", messageID),
      ("status", status),
      ("addrType", addrType),
      ("address",address),
      ("lat", lat),
      ("lon", lon),
      ("alt", alt),
      ("miscInd", miscInd),
      ("nic", nic),
      ("nacp", nacp),
      ("horizV",horizV),
      ("vertV", vertV),
      ("heading", heading),
      ("emitter", emitter),
      ("callSign", callSign),
      ("prio", prio),
      ("spare", spare)]
    =>
     {messageID = mk_int messageID,
      status    = mk_int status,
      addrType  = mk_int addrType,
      address   = mk_int address,
      lat       = mult_by_factor (180.0 / Real.fromInt twoE23) (mk_int lat),
      lon       = mult_by_factor (180.0 / Real.fromInt twoE23) (mk_int lon),
      alt       = mk_int alt * 25 - 1000,
      miscInd   = mk_miscInd miscInd,
      nic       = mk_int nic,
      nacp      = mk_int nacp,
      horizV    = mk_int horizV,
      vertV     = mk_int vertV * 64,
      heading   = mult_by_factor (360.0 / 256.0) (mk_int heading),
      emitter   = mk_int emitter,
      callSign  = mk_string callSign,
      prio      = mk_int prio}
  | otherwise => raise ERR "mk_traffic_report" ""

val report = adsbParse (traffic_report,mk_traffic_report) A;


(*---------------------------------------------------------------------------*)
(* Heartbeat Message                                                         *)
(*---------------------------------------------------------------------------*)
(*
1 Message ID 1 010 = Heartbeat

2 Status Byte 1
   Bit 7: GPS Pos Valid
   Bit 6: Maint Req'd
   Bit 5: IDENT
   Bit 4: Addr Type
   Bit 3: GPS Batt Low
   Bit 2: RATCS
   Bit 1: reserved
   Bit 0: UAT Initialized

3 Status Byte 2
   Bit 7: Time Stamp            (MS bit)
   Bit 6: CSA Requested
   Bit 5: CSA Not Available
   Bit 4: reserved
   Bit 3: reserved
   Bit 2: reserved
   Bit 1: reserved
   Bit 0: UTC OK

4-5 Time Stamp 2 Seconds since 0000Z, bits 15-0 (LS byte first)
6-7 Message Counts
*)

val heartbeat = Recd [
   ("messageID", u8),
   ("status_byte_1",
      Recd [
       ("GPS-Pos-Valid", bit),
       ("Maint-Reqd", bit),
       ("IDENT", bit),
       ("Addr-Type",bit),
       ("GPS-Batt-Low",bit),
       ("RATCS",bit),
       ("reserved", bit),
       ("UAT-Initialized",bit)]),
   ("status_byte_2",
      Recd [
       ("Time-Stamp-MS-bit", bit),
       ("CSA-Requested", bit),
       ("CSA-Not-Avail", bit),
       ("reserved", Raw(intLit 4)),
       ("UTC-OK",bit)]),
   ("Time-Stamp", u16),
   ("Message-Counts", u16)];

val adsb_messages = Recd[
  ("Heartbeat", heartbeat),
  ("Traffic", Array (traffic_report, intLit 150)),
  ("Ownship", traffic_report)]

val target_identity = Recd [
  ("spare", Raw(intLit 4)),
  ("Address", u4),
  ("ParticipantAddress", u24)
 ];

val monitor_report = Recd [
  ("messageID", u8),
  ("monitorID", u8),
  ("spare", Raw(intLit 16)),
  ("SuspectTraffic", Array(target_identity, intLit 150))
 ];
