use "../mesg_format/Contig.sig";
use "../mesg_format/Contig.sml";
open Contig;

use "take_bits.sml";

fun varloc s = Loc (VarName s);

(*---------------------------------------------------------------------------*)
(* Traffic report datastructure                                              *)
(*---------------------------------------------------------------------------*)

type miscIndicators =
  {tt_bit0 : bool,
   tt_bit1 : bool,
   reportKind : bool,
   airborne : bool};

type traffic_report =
   {messageID : int,
    status : int,
    addrType : int,
    address : int,
    lat : real,
    lon : real,
    alt : int,
    miscInd : miscIndicators,
    nic : int,
    nacp : int,
    horizV : int,
    vertV : int,
    heading : int,
    emitter : int,
    callSign : string,
    prio : int
  };

(*===========================================================================*)
(* Contiguity types for message buffer parsing                               *)
(*===========================================================================*)

(*---------------------------------------------------------------------------*)
(* Combination of tt_bits gives track status.                                *)
(*---------------------------------------------------------------------------*)

val miscIndicators = Recd [
  ("tt_bit0",    Raw (intLit 1)),
  ("tt_bit1",    Raw (intLit 1)),
  ("reportKind", Raw (intLit 1)),
  ("airborne",   Raw (intLit 1))
 ];

(*---------------------------------------------------------------------------*)
(* 28 bytes in length. Interpretations of fields given below in field        *)
(* constructors.                                                             *)
(*                                                                           *)
(*   messageId - 8 bits, unsigned, expected to be 20                         *)
(*   status    - 4 bits, unsigned, [0..1] used                               *)
(*   addrType  - 4 bits, unsigned, [0..5] used                               *)
(*   address   - 3 bytes,                                                    *)
(*   lat       - 24 bits, signed real                                        *)
(*   lon       - 24 bits, signed real                                        *)
(*   alt       - 12 bits, unsigned.                                          *)
(*   miscInd   - miscIndicators                                              *)
(*   nic       - 4 bits, essentially an enum of 12 elts (0-11)               *)
(*   nacp      - 4 bits, essentially an enum of 12 elts (0-11)               *)
(*   horizV    - 12 bits, unsigned, range [0..4093]. >= 4094 => 0xFFE        *)
(*   vertV     - 12 bits, signed, some special cases                         *)
(*   heading   - 8 bits, angular weighted value                              *)
(*   emitter   - 8 bits, unsigned, range [0..39],                            *)
(*   callSign  - 64 bits: 8 chars drawn from [A-Z," ",0-9]                   *)
(*   prio      - 4 bits, unsigned, [0-6] used                                *)
(*   spare     - 4 bits, unused.                                             *)
(*---------------------------------------------------------------------------*)

val traffic_report = Recd [
  ("messageID", Raw(intLit 8)),
  ("check-traffic-report", Assert (Beq(varloc"messageID", intLit 20))),
  ("status",  Raw(intLit 4)),
  ("addrType",Raw(intLit 4)),
  ("address", Raw (intLit (8 * 3))),
  ("lat",     Raw (intLit (8 * 3))),
  ("lon",     Raw (intLit (8 * 3))),
  ("alt",     Raw (intLit (4 * 3))),
  ("miscInd", miscIndicators),
  ("nic",     Raw (intLit 4)),
  ("nacp",    Raw (intLit 4)),
  ("horizV",  Raw (intLit (4 * 3))),
  ("vertV",   Raw (intLit (4 * 3))),
  ("heading", Raw (intLit (4 * 2))),
  ("emitter", Raw (intLit (4 * 2))),
  ("callSign", Raw (intLit (8 * 8))),
  ("prio",    Raw (intLit 4)),
  ("spare",   Raw (intLit 4))
 ];

(*---------------------------------------------------------------------------*)
(* Message is taken into pieces with bits_of                                 *)
(*---------------------------------------------------------------------------*)

fun slicer A width i = (bits_of A i width, i+width)

fun trChunks A =
 let val slice = slicer A
     val (messageID,i) = slice 8 0
     val (status,i)    = slice 4 i
     val (addrType,i)  = slice 4 i
     val (address,i)   = slice 24 i
     val (lat,i)       = slice 24 i
     val (lon,i)       = slice 24 i
     val (alt,i)       = slice 12 i
     val (miscInd,i)   = slice 4 i
     val (nic,i)       = slice 4 i
     val (nacp,i)      = slice 4 i
     val (horizV,i)    = slice 12 i
     val (vertV,i)     = slice 12 i
     val (heading,i)   = slice 8 i
     val (emitter,i)   = slice 8 i
     val (callSign,i)  = slice 64 i
     val (prio,i)      = slice 4 i
     val (spare,i)     = slice 4 i
 in
  [("messageID", messageID),
   ("status",    status),
   ("addrType",  addrType),
   ("address",   address),
   ("lat",       lat),
   ("lon",       lon),
   ("alt",       alt),
   ("miscInd",   miscInd),
   ("nic",       nic),
   ("nacp",      nacp),
   ("horizV",    horizV),
   ("vertV",     vertV),
   ("heading",   heading),
   ("emitter",   emitter),
   ("callSign",  callSign),
   ("prio",      prio),
   ("spare",     spare)
  ]
 end


(*---------------------------------------------------------------------------*)
(* Construct traffic report fields                                           *)
(*---------------------------------------------------------------------------*)

fun mk_messageID blist = unsigned blist;
fun mk_status blist   = unsigned blist;
fun mk_addrType blist = unsigned blist;
fun mk_address blist  = unsigned blist;

local
  open Real
  val ii_real = Real.fromInt o IntInf.toInt
  val twoE23 = IntInf.pow(ii_2,23)
  val factor = 180.0 / ii_real twoE23
in
fun mk_lat blist = factor * Real.fromInt (twos_comp blist);
fun mk_lon blist = factor * Real.fromInt (twos_comp blist);
end;

fun mk_alt blist  = unsigned blist * 25 - 1000;

fun mk_miscInd blist =
  case blist
   of [tt0,tt1,rptK,aborn] =>
        {tt_bit0 = boolVal tt0,
         tt_bit1 = boolVal tt1,
         reportKind = boolVal rptK,
         airborne = boolVal aborn}
   | otherwise => raise ERR "mk_miscInd" "";

fun mk_nic blist   = unsigned  blist;
fun mk_nacp blist  = unsigned  blist;
fun mk_horizV blist = unsigned blist
fun mk_vertV blist = twos_comp blist * 64;

local
  open Real
  val factor = 360.0 / 256.0
in
fun mk_heading blist = factor * Real.fromInt (unsigned blist);
end

fun mk_emitter blist = unsigned blist;
fun mk_callSign blist= stringVal blist;
fun mk_prio blist = unsigned blist;

(*---------------------------------------------------------------------------*)
(* Make a traffic report with appropriate integer and real values.           *)
(*---------------------------------------------------------------------------*)

fun parse_traffic_report A =
 let val chunks = trChunks A
     fun elt s = assoc s chunks
 in
 {messageID = mk_messageID (elt "messageID"),
  status   = mk_status (elt "status"),
  addrType = mk_addrType (elt "addrType"),
  address  = mk_address (elt "address"),
  lat      = mk_lat (elt "lat"),
  lon      = mk_lon (elt "lon"),
  alt      = mk_alt (elt "alt"),
  miscInd  = mk_miscInd (elt "miscInd"),
  nic      = mk_nic (elt "nic"),
  nacp     = mk_nacp (elt "nacp"),
  horizV   = mk_horizV (elt "horizV"),
  vertV    = mk_vertV (elt "vertV"),
  heading  = mk_heading (elt "heading"),
  emitter  = mk_emitter (elt "emitter"),
  callSign = mk_callSign (elt "callSign"),
  prio     = mk_prio (elt "prio")
 }
 end;

(*---------------------------------------------------------------------------*)
(* Example                                                                   *)
(*---------------------------------------------------------------------------*)
(*
    1 - Message ID 0x14
    2 - st 0x00
    3 - aa 0xAB
    4 - aa 0x45
    5 - aa 0x49
    6 - ll 0x1F
    7 - ll 0xEF
    8 - ll 0x15
    9 - nn 0xA8
    10 - nn 0x89
    11 - nn 0x78
    12 - dd 0x0F
    13 - dm 0x09
    14 - ia 0xA9
    15 - hh 0x07
    16 - hv 0xB0
    17 - vv 0x01
    18 - tt 0x20
    19 - ee 0x01
    20 - cc 0x4E
    21 - cc 0x38
    22 - cc 0x32
    23 - cc 0x35
    24 - cc 0x56
    25 - cc 0x20
    26 - cc 0x20
    27 - cc 0x20
    28 - px 0x00
*)

val list =
 [0x14, 0x00, 0xAB, 0x45, 0x49, 0x1F, 0xEF, 0x15, 0xA8,
  0x89, 0x78, 0x0F, 0x09, 0xA9, 0x07, 0xB0, 0x01, 0x20,
  0x01, 0x4E, 0x38, 0x32, 0x35, 0x56, 0x20, 0x20, 0x20, 0x00];

val w8list = map Word8.fromInt list;
val A = Word8Array.fromList w8list;

val report = parse_traffic_report A;
