structure ByteContig =
struct

val ERR = mk_HOL_ERR "ByteContig";

type bytes = Word8.word list;

(*---------------------------------------------------------------------------*)
(* lvals designate locations where data lives. Exps are r-values. Since an   *)
(* lval can depend on runtime values, and rvals depend on lvals to read the  *)
(* values at locations, the types are mutually recursive.                    *)
(*---------------------------------------------------------------------------*)

datatype lval
  = VarName of string
  | RecdProj of lval * string
  | ArraySub of lval * exp
and exp
  = Loc of lval
  | intLit of int
  | ConstName of string
  | Add of exp * exp
  | Mult of exp * exp
;

datatype bexp
  = boolLit of bool
  | BLoc of lval
  | Bnot of bexp
  | Bor  of bexp * bexp
  | Band of bexp * bexp
  | Beq  of exp * exp
  | Blt  of exp * exp
  | Bgt  of exp * exp
  | Ble  of exp * exp
  | Bge  of exp * exp
  | DleA of Real.real * exp  (* Basic relations on doubles *)
  | DleB of exp * Real.real
;

(*---------------------------------------------------------------------------*)
(* Leaves of contig types. These are basically tags                          *)
(*---------------------------------------------------------------------------*)

datatype atom
  = Bool
  | Signed of int
  | Unsigned of int
  | Blob;

(*---------------------------------------------------------------------------*)
(* Contiguity types                                                          *)
(*---------------------------------------------------------------------------*)

datatype contig
  = Void
  | Basic of atom
  | Declared of string
  | Raw of exp
  | Assert of bexp
  | Recd of (string * contig) list
  | Array of contig * exp
  | Union of (bexp * contig) list;

(*---------------------------------------------------------------------------*)
(* Parse trees (generated by parseFn).                                       *)
(*---------------------------------------------------------------------------*)

datatype ptree
  = LEAF of atom * bytes
  | RECD of (string * ptree) list
  | ARRAY of ptree list
;

(*---------------------------------------------------------------------------*)
(* Pretty printing                                                           *)
(*---------------------------------------------------------------------------*)

fun paren i j s1 s2 ps =
 let open PP
 in if i < j then
      block CONSISTENT 0 ps
    else
      block INCONSISTENT (size s1)
           (add_string s1 :: ps @ [add_string s2])
end;

fun pp_binop opr x y =
 let open PP
 in  paren 0 0 "(" ")"
	[x, add_string (" "^opr), add_break(1,0), y]
 end

local open Portable PP
in
fun pp_lval lval =
   case lval
    of VarName s => add_string s
     | RecdProj (p,s) =>
        block INCONSISTENT 0 [pp_lval p, add_string".",add_string s]
     | ArraySub (lval,d) =>
        block CONSISTENT 1 [pp_lval lval, paren 0 0 "[" "]" [pp_exp d]]
 and pp_exp exp =
   case exp
    of Loc lval => pp_lval lval
     | intLit i => add_string (Int.toString i)
     | ConstName s => add_string s
     | Add (e1,e2) => pp_binop "+" (pp_exp e1) (pp_exp e2)
     | Mult (e1,e2) => pp_binop "*" (pp_exp e1) (pp_exp e2)
end

fun pp_bexp bexp =
 let open PP
     fun pp_real r = add_string(Real.toString r)
 in
   case bexp
    of boolLit b => add_string (Bool.toString b)
     | BLoc lval => pp_lval lval
     | Bnot b    => block CONSISTENT 0
                     [add_string"not", paren 0 0 "(" ")" [pp_bexp b]]
     | Bor(b1,b2)  => pp_binop "or" (pp_bexp b1) (pp_bexp b2)
     | Band(b1,b2) => pp_binop "and" (pp_bexp b1) (pp_bexp b2)
     | Beq (e1,e2) => pp_binop "="  (pp_exp e1) (pp_exp e2)
     | Blt (e1,e2) => pp_binop "<"  (pp_exp e1) (pp_exp e2)
     | Bgt(e1,e2)  => pp_binop ">"  (pp_exp e1) (pp_exp e2)
     | Ble(e1,e2)  => pp_binop "<=" (pp_exp e1) (pp_exp e2)
     | Bge(e1,e2)  => pp_binop ">=" (pp_exp e1) (pp_exp e2)
     | DleA(r,e)   => pp_binop "<=" (pp_real r) (pp_exp e)
     | DleB(e,r)   => pp_binop "<=" (pp_exp e) (pp_real r)
 end;

fun pp_atom atom =
 let open PP
 in case atom
     of Bool       => add_string "Bool"
      | Signed i   => add_string ("i"^Int.toString (i * 8))
      | Unsigned i => add_string ("u"^Int.toString (i * 8))
      | Blob       => add_string "Raw"
 end;

fun is_recd (Recd _) = true
  | is_recd otherwise = false;

fun pp_contig contig =
 let open PP
 in
   case contig
    of Void => add_string "Void"
     | Basic atom => pp_atom atom
     | Declared s => add_string s
     | Raw exp => block CONSISTENT 1
            [add_string "Raw", add_string "(", pp_exp exp, add_string ")"]
     | Assert bexp => block CONSISTENT 1
            [add_string "Assert", add_string "(", pp_bexp bexp, add_string ")"]
     | Recd fields =>
        let fun pp_field (s,c) = block CONSISTENT 0
               [block CONSISTENT 1
                  [add_string s, add_string " :", add_break(1,0), pp_contig c],
                NL]
        in
          block CONSISTENT 1
             ([add_string "{" ] @ map pp_field fields @ [add_string "}"])
        end
     | Array (c,e) => block CONSISTENT 1
             [pp_contig c, add_string " [", pp_exp e, add_string "]"]
     | Union choices =>
        let fun pp_choice (bexp,c) = block CONSISTENT 0
              [block CONSISTENT 0
                 [add_string "(", pp_bexp bexp, add_string " -->",
                  add_break(1,2), pp_contig c,add_string ")"], NL]
        in
          block CONSISTENT 2
            [add_string "Union {", NL,
             block CONSISTENT 0 (map pp_choice choices),
             add_string "}"]
        end
 end

val _ = PolyML.addPrettyPrinter (fn d => fn _ => fn lval => pp_lval lval);
val _ = PolyML.addPrettyPrinter (fn d => fn _ => fn exp => pp_exp exp);
val _ = PolyML.addPrettyPrinter (fn d => fn _ => fn bexp => pp_bexp bexp);
val _ = PolyML.addPrettyPrinter (fn d => fn _ => fn atm => pp_atom atm);
val _ = PolyML.addPrettyPrinter (fn d => fn _ => fn contig => pp_contig contig);


(*---------------------------------------------------------------------------*)
(* Environments                                                              *)
(*---------------------------------------------------------------------------*)

  type lvalMap   = (lval, atom * (int * int)) Redblackmap.dict;
  type valFn     = (atom -> bytes -> int option);
  type dvalFn    = (atom -> bytes -> real option);
  type constMap  = (string * int) list;
  type declMap   = (string * contig) list;
  type atomWidth = atom -> int;

  type evalenv  = constMap * lvalMap * valFn;
  type evalBenv = constMap * lvalMap * valFn * dvalFn;
  type env      = constMap * declMap * atomWidth * valFn * dvalFn;

  (*  env ++ (repFn,scanRandFn,gn)  *)
  (*  type randenv =
    constMap * declMap * atomWidth * valFn * dvalFn
    * (atom -> int -> string)
    * (lval -> string)
    * Random.generator
   *)
  type state = (lval * contig) list * Word8Array.array * lvalMap  (*  (worklist,s,theta)  *)
  type parsestate = ptree list * Word8Array.array * lvalMap       (*  (stack, s, lvmap)  *)

  datatype verdict = datatype Lib.verdict;


(*---------------------------------------------------------------------------*)
(* A way of expressing the language consisting of just the empty string.     *)
(* Also note that Void can be defined as Union[], but we build it in.        *)
(*---------------------------------------------------------------------------*)

val SKIP = Recd [];

(*---------------------------------------------------------------------------*)
(* lval comparison function used to build lval-keyed finite map.             *)
(*---------------------------------------------------------------------------*)

fun lval_compare pair =
 case pair
  of (VarName s1, VarName s2) => String.compare(s1,s2)
   | (VarName _, _) => LESS
   | (RecdProj _, VarName _) => GREATER
   | (RecdProj (e1,s1),RecdProj (e2,s2)) =>
       (case lval_compare(e1,e2)
         of EQUAL => String.compare(s1,s2)
	  | other => other)
   | (RecdProj _,_) => LESS
   | (ArraySub (a,b),ArraySub (c,d)) =>
       (case lval_compare(a,c)
         of EQUAL => exp_compare(b,d)
	  | other => other)
   | (ArraySub _, _) => GREATER
and
 exp_compare pair =
 case pair
  of (Loc lv1, Loc lv2) => lval_compare(lv1,lv2)
   | (Loc lv1, _) => LESS
   | (intLit _, Loc _) => GREATER
   | (intLit i, intLit j) => Int.compare(i,j)
   | (intLit i, other) => LESS
   | (ConstName _, Loc _) => GREATER
   | (ConstName _, intLit _) => GREATER
   | (ConstName s1, ConstName s2) => String.compare(s1,s2)
   | (ConstName s, _) => LESS
   | (Add _, Mult _) => LESS
   | (Add(a,b), Add(c,d)) =>
       (case exp_compare(a,c)
         of EQUAL => exp_compare(b,d)
	  | other => other)
   | (Add _, _) => GREATER
   | (Mult(a,b), Mult(c,d)) =>
       (case exp_compare(a,c)
         of EQUAL => exp_compare(b,d)
	  | other => other)
   | (Mult _, _) => GREATER
;

(*---------------------------------------------------------------------------*)
(* Map from lvals to (atom,(offset,width)) pairs, where atom signals what    *)
(* kind of type the string between offset and offset+width should be         *)
(* interpeted as.                                                            *)
(*---------------------------------------------------------------------------*)

val empty_lvalMap : lvalMap = Redblackmap.mkDict lval_compare;

val lookup = Redblackmap.peek;

(*---------------------------------------------------------------------------*)
(* Expression evaluation                                                     *)
(*---------------------------------------------------------------------------*)

fun unopFn f g e = Option.map f (g e);

fun binopFn f g e1 e2 =
  case (g e1, g e2)
   of (SOME v1, SOME v2) => SOME (f v1 v2)
    | otherwise => NONE;

fun firstOpt f [] = NONE
  | firstOpt f (h::t) =
    case f h
     of NONE => firstOpt f t
      | SOME x => SOME h;

fun concatOpts optlist =
    SOME(List.concat(List.map Option.valOf optlist)) handle _ => NONE;

fun total_bytes_of A i w =
 let val top = i+w
     fun accFn n acc =
       if n < top then
          accFn (n+1) (Word8Array.sub(A,n)::acc)
       else rev acc
 in if top < Word8Array.length A
    then SOME (accFn i [])
    else NONE
 end;

fun evalExp (E as (Delta,lvalMap,valFn)) A exp =
 let fun locVal A (a,(i,width)) =
       Option.mapPartial (valFn a)
         (total_bytes_of A i width)
 in
 case exp
  of Loc lval => Option.mapPartial (locVal A) (lookup(lvalMap,lval))
   | intLit i =>  SOME i
   | ConstName s =>
       (case assoc1 s Delta
         of SOME(_,i) => SOME i
          | NONE => NONE)
   | Add(e1,e2) => binopFn (curry op+) (evalExp E A) e1 e2
   | Mult(e1,e2) => binopFn (curry op* ) (evalExp E A) e1 e2
 end;

(*---------------------------------------------------------------------------*)
(* Formulas.                                                                 *)
(*---------------------------------------------------------------------------*)

fun orOp a b = a orelse b;
fun andOp a b = a andalso b;

fun boolVal 0 = false
  | boolVal 1 = true
  | boolVal otherwise = raise ERR "boolVal" "";

fun evalBexp (E as (Delta,lvalMap,valFn,dvalFn)) A bexp =
 let val evalE = evalExp (Delta,lvalMap,valFn) A
     fun blocVal A tuple =
      case tuple
       of (Bool,(i,width)) =>
          Option.map boolVal
            (Option.mapPartial (valFn Bool)
              (total_bytes_of A i width))
        | otherwise => NONE
   fun evalB bexp =
    case bexp
     of boolLit b   => SOME b
      | BLoc lval   => Option.mapPartial (blocVal A) (lookup(lvalMap,lval))
      | Bnot b      => Option.map not (evalB b)
      | Bor(b1,b2)  => binopFn orOp evalB b1 b2
      | Band(b1,b2) => binopFn andOp evalB b1 b2
      | Beq (e1,e2) => binopFn (curry op=) evalE e1 e2
      | Blt (e1,e2) => binopFn (curry op<) evalE e1 e2
      | Bgt (e1,e2) => binopFn (curry op>) evalE e1 e2
      | Ble (e1,e2) => binopFn (curry op<=) evalE e1 e2
      | Bge (e1,e2) => binopFn (curry op>=) evalE e1 e2
      | DleA (r,Loc lval) =>
        (case lookup(lvalMap,lval)
          of NONE => NONE
           | SOME(Double,(i,width)) =>
         case total_bytes_of A i width
          of NONE => NONE
           | SOME bytes =>
	 case dvalFn Double bytes
          of NONE => NONE
          | SOME r1 => SOME (Real.<=(r,r1)))
      | DleB (Loc lval,r) =>
        (case lookup(lvalMap,lval)
          of NONE => NONE
           | SOME(Double,(i,width)) =>
         case total_bytes_of A i width
          of NONE => NONE
           | SOME bytes =>
	 case dvalFn Double bytes
          of NONE => NONE
           | SOME r1 => SOME (Real.<=(r1,r)))
      | otherwise => NONE
 in
  evalB bexp
 end;

(*---------------------------------------------------------------------------*)
(* A distinctive feature of our approach is the use of lvals to describe     *)
(* locations in the message where values are stored. These values may, for   *)
(* example, be used as the sizes for variable-sized arrays in the message.   *)
(* For convenience, we allow "location completion", so that partly-given     *)
(* locations can be employed as a convenient notation.                       *)
(*---------------------------------------------------------------------------*)

fun lval_append p lval =
 case lval
  of VarName s => RecdProj(p,s)
   | RecdProj (q,s) => RecdProj(lval_append p q, s)
   | ArraySub (q,dim) => ArraySub(lval_append p q, dim)
;

fun path_prefixes lval =
 case lval
  of VarName _ => [lval]
   | RecdProj (p,s) => lval :: path_prefixes p
   | ArraySub (VarName _,d) => [lval]
   | ArraySub (RecdProj(p,s),dim) => lval :: path_prefixes p
   | ArraySub (arr,dim) => lval :: path_prefixes arr (* goofy, may need to be revisited. *)


fun resolve_lval lvalMap path lval =
 let val prefixes = path_prefixes path
     val prospects = map (C lval_append lval) prefixes @ [lval]
 in firstOpt (Lib.curry Redblackmap.peek lvalMap) prospects
 end

fun resolveExp lvalMap p exp =
 case exp
  of Loc lval     => unopFn Loc (resolve_lval lvalMap p) lval
   | Add (e1,e2)  => binopFn (curry Add) (resolveExp lvalMap p) e1 e2
   | Mult (e1,e2) => binopFn (curry Mult) (resolveExp lvalMap p) e1 e2
   | otherwise    => SOME exp

fun resolveBexp lvalMap p bexp =
 case bexp
  of boolLit _   => SOME bexp
   | BLoc lval   => unopFn BLoc (resolve_lval lvalMap p) lval
   | Bnot b      => unopFn Bnot (resolveBexp lvalMap p) b
   | Bor(b1,b2)  => binopFn (curry Bor) (resolveBexp lvalMap p) b1 b2
   | Band(b1,b2) => binopFn (curry Band) (resolveBexp lvalMap p) b1 b2
   | Beq(e1,e2)  => binopFn (curry Beq) (resolveExp lvalMap p) e1 e2
   | Blt (e1,e2) => binopFn (curry Blt) (resolveExp lvalMap p) e1 e2
   | Bgt (e1,e2) => binopFn (curry Bgt) (resolveExp lvalMap p) e1 e2
   | Ble (e1,e2) => binopFn (curry Ble) (resolveExp lvalMap p) e1 e2
   | Bge (e1,e2) => binopFn (curry Bge) (resolveExp lvalMap p) e1 e2
   | DleA (r,e)  => unopFn (curry DleA r) (resolveExp lvalMap p) e
   | DleB (e,r)  => unopFn (fn v => DleB(v,r)) (resolveExp lvalMap p) e
;

(*---------------------------------------------------------------------------*)
(* Filter with ('a -> bool option) predicate. Strict: return NONE if pred    *)
(* returns NONE.                                                             *)
(*---------------------------------------------------------------------------*)

fun filterOpt P list =
 let fun filt [] acc = SOME (rev acc)
       | filt (h::t) acc =
         case P h
          of NONE => NONE
           | SOME true => filt t (h::acc)
           | SOME false => filt t acc
 in
   filt list []
 end;

fun assocOpt x alist = Option.map snd (assoc1 x alist)

(*---------------------------------------------------------------------------*)
(* substFn is given an assignment for a contig and applies it to the contig, *)
(* yielding a string of bytes.                                                *)
(*---------------------------------------------------------------------------*)

fun substFn E A theta path contig =
 let val (Consts,Decls,atomWidth,valFn,dvalFn) = E
     fun thetaFn lval =
         (case lookup(theta,lval)
           of NONE => NONE
            | SOME (a,(i,width)) => total_bytes_of A i width)
 in
  case contig
   of Void     => NONE
    | Basic _  => thetaFn path
    | Raw _    => thetaFn path
    | Assert b =>
       (case resolveBexp theta path b
         of NONE => NONE
          | SOME b' =>
        case evalBexp (Consts,theta,valFn,dvalFn) A b'
         of SOME true => SOME []
          | otherwise => NONE)
    | Declared name =>
       (case assocOpt name Decls
        of NONE => NONE
	 | SOME c => substFn E A theta path c)
    | Recd fields =>
       let fun fieldFn (fName,c) = substFn E A theta (RecdProj(path,fName)) c
       in concatOpts (List.map fieldFn fields)
       end
    | Array (c,exp) =>
       (case resolveExp theta path exp
         of NONE => NONE
          | SOME exp' =>
        let val dim = Option.valOf (evalExp (Consts,theta,valFn) A exp')
            fun indexFn i = substFn E A theta (ArraySub(path,intLit i)) c
        in concatOpts (List.map indexFn (upto 0 (dim - 1)))
        end)
   | Union choices =>
       let fun choiceFn(bexp,c) =
             Option.mapPartial
               (evalBexp (Consts,theta,valFn,dvalFn) A)
               (resolveBexp theta path bexp)
       in case filterOpt choiceFn choices
           of SOME [(_,c)] => substFn E A theta path c
            | otherwise => NONE
       end
 end
;

(*---------------------------------------------------------------------------*)
(* Matcher in worklist style                                                 *)
(*---------------------------------------------------------------------------*)

fun fieldFn path (fName,c) = (RecdProj(path,fName),c)
fun indexFn path c i = (ArraySub(path,intLit i),c)

fun matchFn E A (state as (worklist,pos,theta)) =
 let val (Consts,Decls,atomWidth,valFn,dvalFn) = E
     val Asize = Word8Array.length A
 in
 case worklist
  of [] => SOME (pos,theta)
   | (_,Void)::_ => NONE
   | (path,Basic a)::t =>
     let val width = atomWidth a
         val newpos = pos + width
     in if Asize < newpos then
          NONE
        else
          matchFn E A (t,newpos,
              Redblackmap.insert(theta,path,(a,(pos,width))))
     end
   | (path,Declared name)::t =>
       (case assocOpt name Decls
        of NONE => NONE
	 | SOME c => matchFn E A ((path,c)::t,pos,theta))
   | (path,Raw exp)::t =>
       (case resolveExp theta path exp
         of NONE => NONE
          | SOME exp' =>
        case evalExp (Consts,theta,valFn) A exp'
         of NONE => NONE
          | SOME width =>
        let val newpos = pos + width
        in if Asize < newpos then
              NONE
           else
              matchFn E A (t,newpos,
                    Redblackmap.insert(theta,path,(Blob,(pos,width))))
        end)
   | (path,Assert bexp)::t =>
       (case resolveBexp theta path bexp
        of NONE => NONE
         | SOME bexp' =>
        case evalBexp (Consts,theta,valFn,dvalFn) A bexp'
         of NONE => NONE
          | SOME false => NONE
          | SOME true => matchFn E A (t,pos,theta))
   | (path,Recd fields)::t => matchFn E A (map (fieldFn path) fields @ t,pos,theta)
   | (path,Array (c,exp))::t =>
       (case resolveExp theta path exp
         of NONE => NONE
          | SOME exp'=>
        case evalExp (Consts,theta,valFn) A exp'
         of NONE => NONE
          | SOME dim =>
        matchFn E A (map (indexFn path c) (upto 0 (dim - 1)) @ t,pos,theta))
   | (path,Union choices)::t =>
       let fun choiceFn(bexp,c) =
             Option.mapPartial
                (evalBexp (Consts,theta,valFn,dvalFn) A)
                (resolveBexp theta path bexp)
       in case filterOpt choiceFn choices
           of SOME[(_,c)] => matchFn E A ((path,c)::t,pos,theta)
            | otherwise => NONE
       end
 end
;

fun match E contig A = matchFn E A ([(VarName"root",contig)],0,empty_lvalMap);

(*
fun check_match E contig A =
 case match E contig A
  of NONE => raise ERR "check_match" "no match"
  |  SOME(pos,theta) =>
      case substFn E A theta (VarName"root") contig
       of SOME bytes => (s1^s2 = s)
       |  NONE => raise ERR "check_match" "substFn failed"
*)

(*---------------------------------------------------------------------------*)
(* Version of matchFn that checks assertions, acting as a predicate on       *)
(* messages.                                                                 *)
(*---------------------------------------------------------------------------*)

fun predFn E A (state as (worklist,pos,theta)) =
 let val (Consts,Decls,atomWidth,valFn,dvalFn) = E
     val Asize = Word8Array.length A
 in
 case worklist
  of [] => PASS (pos,theta)
   | (path,Void)::t => FAIL state
   | (path,Basic a)::t =>
     let val width = atomWidth a
         val newpos = pos + width
     in if Asize < newpos then
          FAIL state
        else
          predFn E A (t,newpos,Redblackmap.insert(theta,path,(a,(pos,width))))
     end
   | (path,Declared name)::t =>
       (case assocOpt name Decls
        of NONE => FAIL state
	 | SOME c => predFn E A ((path,c)::t,pos,theta))
   | (path,Raw exp)::t =>
       (case resolveExp theta path exp
         of NONE => FAIL state
          | SOME exp' =>
        case evalExp (Consts,theta,valFn) A exp'
         of NONE => FAIL state
          | SOME width =>
        let val newpos = pos + width
        in if Asize < newpos then
              FAIL state
           else
             predFn E A (t,newpos,
                   Redblackmap.insert(theta,path,(Blob,(pos,width))))
        end)
   | (path,Assert bexp)::t =>
       (case resolveBexp theta path bexp
        of NONE => FAIL state
         | SOME bexp' =>
        case evalBexp (Consts,theta,valFn,dvalFn) A bexp'
         of SOME true => predFn E A (t,pos,theta)
          | otherwise => FAIL state)
   | (path,Recd fields)::t => predFn E A (map (fieldFn path) fields @ t,pos,theta)
   | (path,Array (c,exp))::t =>
      (case resolveExp theta path exp
        of NONE => FAIL state
         | SOME exp'=>
       case evalExp (Consts,theta,valFn) A exp'
        of NONE => FAIL state
         | SOME dim => predFn E A (map (indexFn path c) (upto 0 (dim - 1)) @ t,pos,theta))
   | (path,Union choices)::t =>
       let fun choiceFn(bexp,c) =
             Option.mapPartial
               (evalBexp (Consts,theta,valFn,dvalFn) A)
               (resolveBexp theta path bexp)
       in case filterOpt choiceFn choices
           of SOME[(_,c)] => predFn E A ((path,c)::t,pos,theta)
            | otherwise => FAIL state
       end
 end
;

fun debug E contig A = predFn E A ([(VarName"root",contig)],0,empty_lvalMap);

fun wellformed E contig A =
 case predFn E A ([(VarName"root",contig)],0,empty_lvalMap)
  of PASS _ => true
   | FAIL _ => false;

(*---------------------------------------------------------------------------*)
(* Parsing into the ptree type. It provides record and array structure, but  *)
(* leaves leaf elements uninterpreted.                                       *)
(*---------------------------------------------------------------------------*)

fun take_drop n list =
    SOME(List.take(list, n),List.drop(list, n)) handle _ => NONE;

(*---------------------------------------------------------------------------*)
(* Environments:                                                             *)
(*                                                                           *)
(*   Consts : maps constant names to integers                                *)
(*   Decls  : maps names to previously declared contigs                      *)
(*   atomWidth : gives width info for basic types                            *)
(*   valFn  : function for computing an integer value                        *)
(*            stored at the designated location in the string.               *)
(*   dvalFn : function for computing a double value                          *)
(*            stored at the designated location in the string.               *)
(*                                                                           *)
(* parseFn operates on a state tuple (stk,s,lvmap)                           *)
(*                                                                           *)
(*  stk  : ptree list         ;;; parser stack                               *)
(*  s    : string             ;;; remainder of string                        *)
(* lvmap : (lval |-> string)  ;;; previously seen values, accessed by path   *)
(*                                                                           *)
(* which is wrapped in the error monad.                                      *)
(*---------------------------------------------------------------------------*)

fun parseFn E A path contig state =
 let val (Consts,Decls,atomWidth,valFn,dvalFn) = E
     val (stk,pos,theta) = state
     val Asize = Word8Array.length A
 in
 case contig
  of Void => NONE
   | Basic a =>
       let val width = atomWidth a
           val newpos = pos + width
       in if Asize < newpos then
          NONE
          else
           SOME(LEAF(a, Option.valOf(total_bytes_of A pos width))::stk,
                newpos,
                Redblackmap.insert(theta,path,(a,(pos,width))))
       end
   | Declared name =>
       (case assocOpt name Decls
        of NONE => NONE
	 | SOME c => parseFn E A path c state)
   | Raw exp =>
       (case resolveExp theta path exp
         of NONE => NONE
          | SOME exp' =>
        case evalExp (Consts,theta,valFn) A exp'
         of NONE => NONE
          | SOME width =>
        let val newpos = pos + width
        in if Asize < newpos then
              NONE
           else
            SOME(LEAF(Blob,Option.valOf(total_bytes_of A pos width))::stk,
                 newpos,
                 Redblackmap.insert(theta,path,(Blob,(pos,width))))
        end)
   | Assert bexp =>
       (case resolveBexp theta path bexp
         of NONE => NONE
	  | SOME  bexp' =>
         case evalBexp (Consts,theta,valFn,dvalFn) A bexp'
          of NONE => NONE
           | SOME tval =>
         if tval then SOME state
         else (print "Assertion failure"; NONE))
   | Recd fields =>
       let fun fieldFn fld NONE = NONE
             | fieldFn (fName,c) (SOME st) = parseFn E A (RecdProj(path,fName)) c st
          fun is_assert (s,Assert _) = true
            | is_assert other = false
          val fields' = filter (not o is_assert) fields
       in case rev_itlist fieldFn fields (SOME state)
           of NONE => NONE
            | SOME (stk',pos',theta') =>
          case take_drop (length fields') stk'
           of NONE => NONE
            | SOME(elts,stk'') =>
          SOME(RECD (zip (map fst fields') (rev elts))::stk'', pos', theta')
       end
   | Array (c,exp) =>
       let fun indexFn i NONE = NONE
             | indexFn i (SOME state) = parseFn E A (ArraySub(path,intLit i)) c state
       in case resolveExp theta path exp
           of NONE => NONE
	    | SOME exp' =>
          case evalExp (Consts,theta,valFn) A exp'
           of NONE => NONE
            | SOME dim =>
          case rev_itlist indexFn (upto 0 (dim - 1)) (SOME state)
           of NONE => NONE
            | SOME (stk',pos',theta') =>
          case take_drop dim stk'
           of NONE => NONE
            | SOME(elts,stk'') => SOME(ARRAY (rev elts)::stk'', pos', theta')
       end
   | Union choices =>
       let fun choiceFn(bexp,c) =
             Option.mapPartial
               (evalBexp (Consts,theta,valFn,dvalFn) A)
               (resolveBexp theta path bexp)
       in case filterOpt choiceFn choices
           of SOME[(_,c)] => parseFn E A path c state
            | otherwise => raise ERR "parseFn" "Union: expected exactly one successful choice"
       end
 end
;

fun parse E contig A =
 case parseFn E A (VarName"root") contig ([],0,empty_lvalMap)
  of SOME ([ptree],pos,theta) => (ptree,pos,theta)
   | SOME otherwise => raise ERR "parse" "expected stack of size 1"
   | NONE => raise ERR "parse" ""
;

(* -------------------------------------------------------------------------- *)
(* Needs fixing so that Decls have Asserts deleted. Maybe.                    *)
(* -------------------------------------------------------------------------- *)

fun delete_asserts Decls contig =
 case contig
  of Declared s => delete_asserts Decls (assoc s Decls)
   | Assert _ => SKIP
   | Recd fields =>
      let fun is_empty (s,Recd[]) = true
            | is_empty otherwise = false
          fun is_assert (s,Assert _) = true
            | is_assert other = false
          fun predUnion P1 P2 x = P1 x orelse P2 x
          fun fieldFn (s,c) = (s, delete_asserts Decls c)
      in Recd (filter (not o predUnion is_empty is_assert)
                      (map fieldFn fields))
      end
   | Array (c,e) => Array (delete_asserts Decls c, e)
   | Union bclist => Union(map (fn (b,c) => (b, delete_asserts Decls c)) bclist)
   | otherwise => contig;

fun add_contig_decl E (s,d) =
 let val (Consts,Decls,aW,vFn,dvFn) = E
 in (Consts,(s,d)::Decls,aW,vFn,dvFn)
 end

(* -------------------------------------------------------------------------- *)
(* Add enum contig to environment: the enum is a Basic thingy, and the        *)
(* constants (with associated numeric values) get added to the Consts.        *)
(* -------------------------------------------------------------------------- *)
(*
fun add_enum_decl E (s,bindings) =
 let val (Consts,Decls,atomWidth,valFn,dvalFn) = E
     val enum = Basic(Enum s)
     val bindings' = map (fn (name,i) => (s^"'"^name,i)) bindings
 in
   (bindings' @ Consts, (s,enum)::Decls, atomWidth,valFn,dvalFn)
 end
*)


end (* ByteContig *)
