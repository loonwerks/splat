(*---------------------------------------------------------------------------*)
(* Mocked-up version of API                                                  *)
(*---------------------------------------------------------------------------*)

structure API =
struct

val w8zero = Word8.fromInt 0;
val emptybuf = Word8Array.array 0 w8zero;

fun clear_buf buffer =
 let val len = Word8Array.length buffer
     fun zero i = Word8Array.update buffer i w8zero
     fun loop j = if j < len then (zero j; loop (j+1)) else ()
 in
    loop 0
 end;

(*---------------------------------------------------------------------------*)
(* Buffer for the input port contents                                        *)
(*---------------------------------------------------------------------------*)

val input_buffer = Word8Array.array 4387 w8zero;

(*---------------------------------------------------------------------------*)
(*    #(api_logInfo) s Utils.emptybuf;                                       *)
(*---------------------------------------------------------------------------*)

fun logInfo s = TextIO.output TextIO.stdErr s;

(*---------------------------------------------------------------------------*)
(* Grab filter input from file.                                               *)
(*---------------------------------------------------------------------------*)
(*
fun api_get_Observed emptyString buf =
 case CommandLine.arguments()
  of [fileName] => Utils.file2buf fileName buf
   | otherwise =>
     (TextIO.print_err"Expected a filename"; raise Utils.ERR "" "");
*)
(*---------------------------------------------------------------------------*)
(* Clear buffer, read file into buffer, copy buffer to string. As stub code, *)
(* it's an elaborate no-op, but enables easy testing. Note that              *)
(* api_get_filter_in is assumed to raise an exception when the input is too  *)
(* large for the buffer.                                                     *)
(*---------------------------------------------------------------------------*)

fun fill_input_buffer () = ()

(* Not used at the moment, since the tests fill the input buffer directly

let val () = Utils.clear_buf input_buffer
      val () = api_get_Observed "" input_buffer
   in ()
   end
   handle _ =>
    (logInfo "Monitor failure: unable to fill input buffer.";
     raise Utils.ERR "fill_input_buffer" ""
    );
*)

(*---------------------------------------------------------------------------*)
(*    #(api_put_suspect_traffic_out) string Utils.emptybuf                   *)
(*---------------------------------------------------------------------------*)

fun send_Suspect_Traffic_Out string = () (* TextIO.output TextIO.stdOut string; *)
fun send_Health_Out string = () (* TextIO.output TextIO.stdOut string; *)

end (* API *)
