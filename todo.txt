Splat todo list (August 9, 2021)
----------------------------------

- Get Briefcase install

- Lowering of identifier case passes finished

- Integrate flatmap into code gen

- Support type declarations in body of filter/monitor/gate things

- Implement "standalone" mode

- Incoming JSON is untyped, but eventually typed CakeML programs are
  created. Current plan is to map untyped JSON to HOL preterms and
  then use the HOL type inferencer to get well-typed terms. These can
  then be readily mapped to CakeML, possibly by an Emit_CakeML module.

- Implement auto-gen for encoders (based on contig type specs? Not sure)

- Need to have a discussion on how to specify the correct contig-types
  for a port type. Things that need to be solved:

        * varying length arrays
	* how to map encoded data to datatypes
	* can AADL handle unbounded lists somehow
  ===>

   Current thought: leave the model as is and give command-line args
   to splat that tell it how to handle specific port types, by
   associating port type names to contig types.  This should allow
   straightforward encodings for examples that can be directly handled
   by contig types.  Problem: for types where there is not a direct
   1-1 mapping from the contig type to the AADL/AGREE type, we can't
   synthesize the decoder and will need some code. Fortunately, that
   isn't needed for the ADS-B stuff. But it is needed for UXAS!

- Merge DFA stuff in

- Merge bit-oriented and byte-oriented approaches. Get phase 2 and
  phase 3 examples to go through in the new set-up

- Add list construction to contig type implementations
- Investigate sentinel-terminated lists

- Proofs and Formalizations

  * completeness
  * upgrade formalization to use (pos,width) locations rather than slices
  * compilation
  * formalized compilation
  * TV-style proofs via symbolic eval. of contig-types
  * recursive contig-types
  * Component semantics
  * Correctness of code gen

- Examples

  * Cong example
  * Ben example
