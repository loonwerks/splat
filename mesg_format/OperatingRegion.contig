(*---------------------------------------------------------------------------*)
(* Full uxAS operating region message looks like the following               *)
(* (Eric Mercer dug this info out):                                          *)
(*                                                                           *)
(*  <address> $ <attributes> $ <LMCP_Object>                                 *)
(*                                                                           *)
(* where                                                                     *)
(*                                                                           *)
(*  <address> is e.g. uxas.project.isolate.IntruderAlert,                    *)
(*                    uxas.roadmonitor,  etc.                                *)
(*                                                                           *)
(*  <attributes> = <contentType>       ;; string of non "|" chars            *)
(*               | <descriptor>        ;; ditto                              *)
(*               | <source-group>      ;; ditto                              *)
(*               | <source-entity-ID>  ;; ditto                              *)
(*               | <source-service-ID> ;; ditto                              *)
(*                                                                           *)
(* (The vertical bars are included in the message text.)                     *)
(*                                                                           *)
(*  <LMCP_Object> is described below.                                        *)
(*---------------------------------------------------------------------------*)

use "contig.sml";

(*---------------------------------------------------------------------------*)
(* Stuff that belongs elsewhere                                              *)
(*---------------------------------------------------------------------------*)

fun valueFn s =
 let open Regexp_Numerics
 in IntInf.toInt(string2iint Unsigned MSB s)
 end;

infix ------>;
val op------> = (fn (a,b) => (a,b));

val EMPTY = Recd [];

fun add_constant (s,i) (a,b,c,d) = ((s,i)::a,b,c,d);

val E0 = add_constant("OPERATINGREGION",39) ([],[],atomic_widths,valueFn);

val operating_region = Recd [
  ("ID", i64),
  ("keepinLen", u16),
  ("keep_in_areas", Array(u64, Loc(VarName "keepinLen"))),
  ("keepoutLen", u16),
  ("keep_out_areas", Array(u64, Loc(VarName "keepoutLen")))
  ];

(*---------------------------------------------------------------------------*)
(* Either an operating region, or nothing, controlled by the nonNullMesg     *)
(* field.                                                                    *)
(*---------------------------------------------------------------------------*)

val OpReg_Option = Union [
  (BLoc (VarName "nonNullMesg")
   ------> Recd[("seriesID", i64),
                ("mesgType", u32),
                ("check-mesgType", Assert (Beq(Loc(VarName"mesgType"),
                                               ConstName"OPERATINGREGION"))),
                ("version",  u16),
                ("payload",  operating_region)])
   ,
  (Bnot(BLoc (VarName "nonNullMesg"))
   ------> EMPTY)
  ]

val LMCP_Object = Recd [
  ("controlString", i32),  (* = 0x4c4d4350 = valueFn "LMCP" *)
  ("check", Assert (Beq(Loc(VarName"controlString"),intLit 0x4c4d4350))),
  ("mesgSize",      u32),
  ("nonNullMesg",   Basic Bool),
  ("contents",      OpReg_Option),
  ("checksum",      u32)
];

val attributes = Recd [
 ("contentType",      Scanner (scanTo "|")),
 ("descriptor",       Scanner (scanTo "|")),
 ("source_group",     Scanner (scanTo "|")),
 ("source_entity_ID", Scanner (scanTo "|")),
 ("source_service_ID",Scanner (scanTo "$"))
 ];

val full_mesg = Recd [
  ("address",     Scanner (scanTo "$")),
  ("attributes",  attributes),
  ("lmcp-object", LMCP_Object)
  ];
