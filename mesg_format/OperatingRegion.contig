(*---------------------------------------------------------------------------*)
(* Full uxAS operating region message looks like the following               *)
(* (Eric Mercer dug this info out):                                          *)
(*                                                                           *)
(*  <address> $ <attributes> $ <LMCP_Object>                                 *)
(*                                                                           *)
(* where                                                                     *)
(*                                                                           *)
(*  <address> is e.g. uxas.project.isolate.IntruderAlert,                    *)
(*                    uxas.roadmonitor,  etc.                                *)
(*                                                                           *)
(*  <attributes> = <contentType>       ;; string of non "|" chars            *)
(*               | <descriptor>        ;; ditto                              *)
(*               | <source-group>      ;; ditto                              *)
(*               | <source-entity-ID>  ;; ditto                              *)
(*               | <source-service-ID> ;; ditto                              *)
(*                                                                           *)
(* (The vertical bars are included in the message text.)                     *)
(*                                                                           *)
(*  <LMCP_Object> is described below.                                        *)
(*---------------------------------------------------------------------------*)

use "contig.sml";
use "uxas-constants.contig";

(*---------------------------------------------------------------------------*)
(* Stuff that belongs elsewhere                                              *)
(*---------------------------------------------------------------------------*)

fun valueFn s =
 let open Regexp_Numerics
 in IntInf.toInt(string2iint Unsigned MSB s)
 end;

val EMPTY = Recd [];

(*---------------------------------------------------------------------------*)
(* Initial environment, binding the operating region to a number, and std    *)
(* versions of all else.                                                     *)
(*---------------------------------------------------------------------------*)

val E0 = ([("OPERATINGREGION",39)],[],atomic_widths,valueFn);

(*---------------------------------------------------------------------------*)
(* Core payload                                                              *)
(*---------------------------------------------------------------------------*)

val operating_region = Recd [
  ("ID",             i64),
  ("keepinLen",      u16),
  ("keep_in_areas",  Array(u64, Loc(VarName "keepinLen"))),
  ("keepoutLen",     u16),
  ("keep_out_areas", Array(u64, Loc(VarName "keepoutLen")))
  ];

(*---------------------------------------------------------------------------*)
(* Union representing either: an operating region, or nothing. The choice is *)
(* controlled by the nonNullMesg field.                                      *)
(*---------------------------------------------------------------------------*)

val OpReg_Option = Recd [
 ("nonNullMesg", Basic Bool),
 ("contents",
   Union [
     (Bnot(BLoc (VarName "nonNullMesg")), EMPTY),
     (BLoc (VarName "nonNullMesg"),
          Recd[("seriesID", i64),
               ("mesgType", u32),
               ("check-mesgType", Assert (Beq(Loc(VarName"mesgType"),
                                              ConstName"OPERATINGREGION"))),
               ("version",  u16),
               ("payload",  operating_region)])
   ])
 ];

(*---------------------------------------------------------------------------*)
(* LMCP objects.                                                             *)
(*---------------------------------------------------------------------------*)

val LMCP_Object = Recd [
  ("controlString", i32),  (* = 0x4c4d4350 = valueFn "LMCP" *)
  ("check",         Assert (Beq(Loc(VarName"controlString"),intLit 0x4c4d4350))),
  ("mesgSize",      u32),
  ("object",        OpReg_Option),
  ("checksum",      u32)
];

(*---------------------------------------------------------------------------*)
(* Attribute header stuff                                                    *)
(*---------------------------------------------------------------------------*)

val attributes = Recd [
 ("contentType",      Scanner (scanTo "|")),
 ("descriptor",       Scanner (scanTo "|")),
 ("source_group",     Scanner (scanTo "|")),
 ("source_entity_ID", Scanner (scanTo "|")),
 ("source_service_ID",Scanner (scanTo "$"))
 ];

(*---------------------------------------------------------------------------*)
(* Using some regexp-like notation, this is                                  *)
(*                                                                           *)
(*  (.* "$") (.* "|"){4} (.* "$") <lmcp-object>                              *)
(*---------------------------------------------------------------------------*)

val full_mesg = Recd [
 ("address",     Scanner (scanTo "$")),
 ("attributes",  attributes),
 ("lmcp-object", LMCP_Object)
];

(*---------------------------------------------------------------------------*)
(*  Pretty printed version:

val full_mesg =
 {address : <scan-fn>
  attributes :
    {contentType : <scan-fn>
     descriptor : <scan-fn>
     source_group : <scan-fn>
     source_entity_ID : <scan-fn>
     source_service_ID : <scan-fn>
    }
  lmcp-object :
    {controlString : i32
     check : Assert((controlString = 1280131920))
     mesgSize : u32
     object :
       {nonNullMesg : Bool
        contents : Union {
          (not(nonNullMesg) --> {})
          (nonNullMesg -->
             {seriesID : i64
              mesgType : u32
              check-mesgType : Assert((mesgType = OPERATINGREGION))
              version : u16
              payload :
                {ID : i64
                 keepinLen : u16
                 keep_in_areas : u64 [keepinLen]
                 keepoutLen : u16
                 keep_out_areas : u64 [keepoutLen]
                }
             })
        }
       }
     checksum : u32
    }
 }: contig

*)
