use "contig.sml";
use "uxas-constants.contig";

(*---------------------------------------------------------------------------*)
(* Set up the environment.                                                   *)
(*---------------------------------------------------------------------------*)

fun valueFn s =
 let open Regexp_Numerics
 in IntInf.toInt(string2iint Unsigned MSB s)
 end

val real32 = Basic Float;
val real64 = Basic Double;

val EMPTY = Recd [];

(*---------------------------------------------------------------------------*)
(* Common support                                                            *)
(*---------------------------------------------------------------------------*)

fun add_contig_decl E (s,d) =
 let val (Consts,Decls,aW,vFn) = E
 in (Consts,(s,d)::Decls,aW,vFn)
 end

fun uxasArray contig = Recd [
  ("len", u16),
  ("elts", Array(contig, Loc (VarName"len")))
 ];

fun arrlenBound name i =
 Assert (Bleq(Loc(RecdProj(VarName name,"len")), intLit i));

fun uxasArray_withBound contig bound = Recd [
  ("len", u16),
  ("len-check",  Assert (Bleq(Loc(VarName "len"), intLit bound))),
  ("elts", Array(contig, Loc (VarName"len")))
 ];


(*---------------------------------------------------------------------------*)
(* Wrapper for a contig, with message type specified                         *)
(*---------------------------------------------------------------------------*)

fun lmcpObject mesgtyName contig = Recd [
 ("hasContents", Basic Bool),
 ("contents",
   Union [
     (Bnot(BLoc (VarName "hasContents")), EMPTY),
     (BLoc (VarName "hasContents"),
          Recd[("seriesID", i64),
               ("mesgType", u32),
               ("version",  u16),
               ("check-mesg-numbers",
                Assert (Band(Beq(Loc(VarName "seriesID"),ConstName "CMASISeriesID"),
                        Band(Beq(Loc(VarName "mesgType"),ConstName mesgtyName),
                             Beq(Loc(VarName "seriesID"),ConstName "CMASISeriesVersion"))))),
               ("payload",  contig)])
   ])
 ];

(*---------------------------------------------------------------------------*)
(* Common elements                                                           *)
(*---------------------------------------------------------------------------*)

val StringRecd = uxasArray (Basic Char);

val String = Declared "StringRecd";

val KeyValuePair =  (* pairs of varying length strings *)
  Recd [("key",   String),
        ("value", String)];

val KeyValuePair = Declared "KeyValuePair";

val KeyValuePairObj = lmcpObject "KEYVALUEPAIR" KeyValuePair;

val altitude_type =
 ("AltitudeType",
  [("AGL",0),
   ("MSL",1)
  ]);

val wavelength_band =
 ("WavelengthBand",
  [("AllAny",0),
   ("EO",    1),
   ("LWIR",  2),
   ("SWIR",  3),
   ("MWIR",  4),
   ("Other", 5)
  ]);

val AltitudeType = Declared "AltitudeType";
val WavelengthBand = Declared "WavelengthBand";

val E = (uxas_constants_map,[],atomic_widths,valueFn)
     |> C add_enum_decl altitude_type
     |> C add_enum_decl wavelength_band
     |> C add_contig_decl ("String",StringRecd)
     |> C add_contig_decl ("KeyValuePair", KeyValuePairRecd)
;

val Wedge = Recd [
  ("AzimuthCenterline",  real32),
  ("VerticalCenterline", real32),
  ("AzimuthExtent",      real32),
  ("VerticalExtent",     real32)
 ];


val Location3D = Recd [
  ("Latitude",  real64),
  ("Longitude", real64),
  ("Altitude",  real32),
  ("AltitudeType", AltitudeType)
];

(*---------------------------------------------------------------------------*)
(* The AirVehicleState message format as a contig type                       *)
(*---------------------------------------------------------------------------*)

val LineSearchTask = Recd [
  (* Task *)
  ("TaskID",           i64),
  ("Label",            String),
  ("EligibleEntities", uxasArray_withBound i64 32),
  ("RevisitRate",      real32),
  ("Parameters",       uxasArray_withBound KeyValuePairObj 8),
  ("Priority",         u8),
  ("Required",         Basic Bool),
  (* SearchTask *)
  ("DesiredWavelengthBands", uxasArray_withBound WavelengthBand 8),
  ("DwellTime",              i64),
  ("GroundSampleDistance",   real32),
  (* LineSearchTask *)
  ("PointList",     uxasArray_withBound (lmcpObject "LOCATION3D" Location3D) 1024),
  ("ViewAngleList", uxasArray_withBound (lmcpObject "WEDGE" Wedge) 16),
  ("UseInertialViewAngles", Basic Bool)
];
