use "contig.sml";
use "uxas-constants.contig";

(*---------------------------------------------------------------------------*)
(* Wrapper for a contig, with message type specified                         *)
(*---------------------------------------------------------------------------*)

fun lmcpObject mesgtyName contig = Recd [
 ("hasContents", Basic Bool),
 ("contents",
   Union [
     (Bnot(BLoc (VarName "hasContents")), EMPTY),
     (BLoc (VarName "hasContents"),
          Recd[("seriesID", i64),
               ("mesgType", u32),
               ("version",  u16),
               ("check-mesg-numbers",
                Assert (Band(Beq(Loc(VarName "seriesID"),ConstName "CMASISeriesID"),
                        Band(Beq(Loc(VarName "mesgType"),ConstName mesgtyName),
                             Beq(Loc(VarName "seriesID"),ConstName "CMASISeriesVersion"))))),
               ("payload",  contig)])
   ])
 ];

val StringRecd = uxasArray (Basic Char);

val String = Declared "StringRecd";

val KeyValuePairRecd =  (* pairs of varying length strings *)
  Recd [("key",   String),
        ("value", String)];

val KeyValuePair = Declared "KeyValuePair";

(*---------------------------------------------------------------------------*)
(* Contig-types underlying AutomationResponse                                *)
(*---------------------------------------------------------------------------*)

val speed_type =
 ("SpeedType",
  [("AirSpeed",0),
   ("GroundSpeed",1)
  ]);

val turn_type =
 ("TurnType",
  [("TurnShort",0),
   ("FlyOver",1)
  ]);

val command_status_type =
 ("CommandStatusType",
  [("Pending",   0),
   ("Approved",  1),
   ("InProcess", 2),
   ("Executed",  3),
   ("Cancelled", 4)
 ]);

val SpeedType = Declared "SpeedType";
val TurnType = Declared "TurnType";
val CommandStatusType = Declared "CommandStatusType";

val VehicleAction = Recd [
  ("AssociatedTaskList", uxasArray_withBound i64 8)
];

val VehicleActionCommand = Recd [
  ("CommandID", i64),
  ("VehicleID", i64),
  ("VehicleActionList", uxasArray_withBound (lmcpObject "VEHICLEACTION" VehicleAction) 8),
  ("Status", CommandStatusType)
 ];

val Waypoint = Recd [
  ("location", Location3D),
  ("Number", i64),
  ("NextWaypoint", i64),
  ("Speed", real32),
  ("SpeedType", SpeedType),
  ("ClimbRate", real32),
  ("TurnType", TurnType),
  ("VehicleActionList", uxasArray_withBound (lmcpObject "VEHICLEACTION" VehicleAction) 8),
  ("ContingencyWaypointA",i64),
  ("ContingencyWaypointB",i64),
  ("AssociatedTasks",uxasArray_withBound i64 8)
 ];

val MissionCommand = Recd [
 ("vac", VehicleActionCommand),
 ("WaypointList", uxasArray_withBound (lmcpObject "WAYPOINT" Waypoint) 1024),
 ("FirstWaypoint", i64)
];

val AutomationResponse = Recd [
 ("MissionCommandList",
   uxasArray_withBound (lmcpObject "MISSIONCOMMAND" MissionCommand) 16),
 ("VehicleCommandList",
   uxasArray_withBound (lmcpObject "VEHICLEACTIONCOMMAND" VehicleActionCommand) 64),
 ("Info", uxasArray_withBound (lmcpObject "KEYVALUEPAIR" KeyValuePair) 8)
];